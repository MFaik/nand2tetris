// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array arr;
    field int len;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let len = -1;
        if(maxLength > 0) {
            let arr = Memory.alloc(maxLength);
            let len = 0;
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if(len > 0) {
            do Memory.deAlloc(arr);
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return arr[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let arr[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let arr[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let len = len - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int ret, ptr;
        var int c; 
        var boolean neg;
        let c = arr[0];
        if(c = 45) { //45 = '-'
            let neg = true;
            let ptr = 1;
            let c = arr[1];
        }
        while(c > 47 & c < 58 & ptr < len) {//48 = '0' and 57 = '9'
            let ret = ret * 10 + c - 48;
            let ptr = ptr + 1;
            let c = arr[ptr];
        }

        if(neg) {
            return -ret;
        }
        return ret;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int digit, val2;

        if(val = 0) {
            let len = 1;
            let arr[0] = 48;//48 = '0'
        } else {
            if(val < 0) {
                let val = -val;
                let digit = 1;
                let arr[0] = 45;//45 = '-'
            }
            let val2 = val;
            while(val2 > 0) {
                let digit = digit + 1;
                let val2 = val2 / 10;
            }
            let len = len + digit;
            while(val > 0) {
                let digit = digit - 1;
                let arr[digit] = (val - ((val/10)*10)) + 48;//48 = '0'
                let val = val / 10;
            }
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
