// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)
    static int divRet;
    static int sqrtX;

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
        var int sum, mask, cnt;
        let mask = 1;
        while(cnt < 16) {
            if(mask & y) {
                let sum = sum + x;
            } //TODO: try adding mask > y return
            let mask = mask + mask;
            let x = x + x;

            let cnt = cnt+1;
        }
        return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    /*
    
    */
    function int divide(int x, int y) {
        let divRet = 0;
        do Math.divideInternal(Math.abs(x), Math.abs(y));
        if((x < 0) = (y < 0)) {
            return divRet;
        } else {
            return -divRet;
        }
    }

    function int divideInternal(int x, int y) {
        if(y > x) {
            return x;
        }
        let x = Math.divideInternal(x, y+y);
        let divRet = divRet + divRet;
        if(y > x) {
            return x;
        }
        let divRet = divRet + 1;
        return x - y;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        let sqrtX = x;
        return Math.sqrtInternal(1);
    }

    function int sqrtInternal(int y) {
        var int mem;
        if(y = 256) {
            return 0;
        }
        let mem = Math.sqrtInternal(y+y);
        let y = y + mem;
        if(y < 182){
            if(((y * y)-1) < sqrtX) {
                return y;
            }
        }
        return mem;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
        if(a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
        if(a < b) {
            return a;
        }
        return b;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0) {
            return -x;
        }
        return x;
    }
}
